class ThumbnailWorker(QObject):
    thumbnailReady = pyqtSignal(str, QIcon)
    workerError = pyqtSignal(str, str)  # path, error message
    
    def __init__(self, queue, stop_flag, show_tags=True, image_thumb_mode="zoom", 
                 max_retries=2, cleanup_interval=50, thumb_cache_dir=None):
        super().__init__()
        self.queue = queue
        self.stop_flag = stop_flag
        self.show_tags = show_tags
        self.image_thumb_mode = image_thumb_mode  # "zoom", "fit", or "stretch"
        self.max_retries = max_retries
        self.cleanup_interval = cleanup_interval
        self.processed_count = 0
        self.thumb_cache_dir = thumb_cache_dir
        
        # Setup cleanup timer
        self.cleanup_timer = QTimer()
        self.cleanup_timer.timeout.connect(self._cleanup_resources)
        self.cleanup_timer.start(5000)  # Clean up every 5 seconds

    def _wrap_centered_pixmap(self, pix: QPixmap) -> QPixmap:
        """Center the pixmap into a padded THUMB_SIZE square."""
        final_pix = QPixmap(THUMB_SIZE, THUMB_SIZE)
        final_pix.fill(Qt.transparent)
        painter = QPainter(final_pix)
        painter.setRenderHint(QPainter.SmoothPixmapTransform)
        x = (THUMB_SIZE - pix.width()) // 2 if pix.width() < THUMB_SIZE else 0
        y = (THUMB_SIZE - pix.height()) // 2 if pix.height() < THUMB_SIZE else 0
        painter.drawPixmap(x, y, pix)
        painter.end()
        return final_pix

    def run(self):
        """Main worker loop with improved error handling and resource management"""
        while not self.stop_flag[0]:
            try:
                path = self.queue.get(timeout=0.1)
            except Empty:
                continue
            except Exception:
                continue

            if not os.path.exists(path):
                print(f"[ThumbnailWorker][DEBUG] File does not exist: {path}")
                self.queue.task_done()
                continue

            ext = os.path.splitext(path)[1].lower()
            
            thumb_path = os.path.normpath(os.path.join(
                os.path.dirname(path), ".thumbs",
                os.path.splitext(os.path.basename(path))[0] + "_thumb.jpg"
            )).replace("\\", "/")
            
            cache_file = self._thumb_cache_path(path)

            try:
                # Try C++ generated image/video thumbnails
                if ext in ('.jpg', '.jpeg', '.png', '.bmp', '.webp', '.mp4', '.avi', '.mov', '.webm', '.mkv'):
                    pixmap = None
                    thumb_found = False
                    
                    # First try to load from .thumbs folder (generated by C++ module)
                    if os.path.exists(thumb_path):
                        try:
                            pixmap = QPixmap(thumb_path)
                            if not pixmap.isNull():
                                thumb_found = True
                                print(f"[ThumbnailWorker][DEBUG] Found .thumbs thumbnail for {path}: {thumb_path} ({pixmap.width()}x{pixmap.height()})")
                                # Check quality/size
                                if pixmap.width() < THUMB_SIZE // 2 or pixmap.height() < THUMB_SIZE // 2:
                                    print(f"[ThumbnailWorker][DEBUG] Thumbnail too small for {path}: {pixmap.width()}x{pixmap.height()} (expected at least {THUMB_SIZE})")
                                    pixmap = None
                                    thumb_found = False
                            else:
                                print(f"[ThumbnailWorker][DEBUG] .thumbs thumbnail is null for {path}: {thumb_path}")
                                pixmap = None
                        except Exception as e:
                            print(f"[ThumbnailWorker] Error loading thumbnail from .thumbs: {e}")
                            pixmap = None
                    
                    # If not found in .thumbs, try cache
                    if pixmap is None and cache_file.exists():
                        try:
                            pixmap = QPixmap(str(cache_file))
                            if not pixmap.isNull():
                                print(f"[ThumbnailWorker][DEBUG] Loaded from .thumbs_cache for {path}: {cache_file}")
                            else:
                                print(f"[ThumbnailWorker][DEBUG] .thumbs_cache thumbnail is null for {path}: {cache_file}")
                                pixmap = None
                        except Exception as e:
                            print(f"[ThumbnailWorker] Error loading cached thumbnail: {e}")
                            pixmap = None
                    
                    # If still no thumbnail, try to generate one
                    if pixmap is None:
                        print(f"[ThumbnailWorker][DEBUG] No cached thumbnail found, attempting to generate for {path}")
                        if ext in ('.jpg', '.jpeg', '.png', '.bmp', '.webp'):
                            # For images, try direct loading
                            try:
                                pixmap = QPixmap(path)
                                if pixmap.isNull():
                                    raise Exception("Failed to load image")
                            except Exception as e:
                                print(f"[ThumbnailWorker] Error loading image directly: {e}")
                                pixmap = None
                        elif ext in ('.mp4', '.avi', '.mov', '.webm', '.mkv'):
                            # For videos, try CV2 fallback
                            frame = self._safe_video_thumb_with_fallback(path)
                            if frame is not None:
                                height, width, channel = frame.shape
                                bytesPerLine = 3 * width
                                qImg = QImage(frame.data, width, height, bytesPerLine, QImage.Format_RGB888)
                                pixmap = QPixmap.fromImage(qImg)
                    
                    if pixmap and not pixmap.isNull():
                        scaled = self._wrap_centered_pixmap(pixmap.scaled(
                            THUMB_SIZE, THUMB_SIZE,
                            Qt.KeepAspectRatioByExpanding, Qt.SmoothTransformation
                        ))
                        icon = QIcon(scaled)
                        # Save to cache if not already there and if loaded from .thumbs
                        if thumb_found and not cache_file.exists():
                            scaled.save(str(cache_file), "JPG")
                            print(f"[ThumbnailWorker][DEBUG] Saved thumbnail to cache: {cache_file}")
                    else:
                        print(f"[ThumbnailWorker][DEBUG] No valid thumbnail found for {path}, using fallback icon.")
                        icon = self._create_fallback_icon(path, ext)

                # Rest of your existing code for GIFs, PDFs, etc...
                # ... [keep the existing code for other file types]
                
            except Exception as e:
                print(f"[ThumbnailWorker] Unexpected error for {path}: {e}")
                icon = self._create_fallback_icon(path, ext)

            # Always emit something, even if it's a fallback
            if not icon.isNull():
                self.thumbnailReady.emit(path, icon)
            else:
                # Last resort fallback
                print(f"[ThumbnailWorker][DEBUG] Emitting fallback icon for {path} (icon isNull)")
                icon = self._create_fallback_icon(path, ext)
                self.thumbnailReady.emit(path, icon)

            self.queue.task_done()
            self.processed_count += 1